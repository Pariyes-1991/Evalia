import streamlit as st
import pandas as pd
import requests
import io

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏≠‡∏õ
st.set_page_config(
    page_title="Evalute + AI",
    page_icon=":rocket:",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ‡∏™‡πÑ‡∏ï‡∏•‡πå CSS ‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢‡πÅ‡∏ö‡∏ö Grok
st.markdown(
    """
    <style>
    .stApp {
        background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
        color: #e0e0e0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    .stHeader {
        background-color: #0a0a1a;
        padding: 10px;
        border-radius: 10px;
        text-align: center;
    }
    .stButton>button {
        background-color: #00aaff;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 5px;
        transition: all 0.3s ease;
    }
    .stButton>button:hover {
        background-color: #0088cc;
        transform: scale(1.05);
    }
    .card {
        background: #2a2a3e;
        padding: 15px;
        border-radius: 10px;
        margin-bottom: 15px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }
    h1, h2, h3, h4 {
        color: #00d4ff;
        font-weight: 600;
    }
    ul {
        list-style-type: none;
        padding-left: 0;
    }
    ul li {
        margin: 5px 0;
    }
    a {
        text-decoration: none;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
st.markdown('<div class="stHeader"><h1>Evalute + AI</h1><p>Applicant Analyzer with Extended Rule-Based Keywords</p></div>', unsafe_allow_html=True)
st.divider()

# ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
upload_option = st.radio("Choose data input method:", ("Upload Excel File", "Provide Online Excel Link"), horizontal=True)

df = None
if upload_option == "Upload Excel File":
    uploaded_file = st.file_uploader("Upload your Excel file (.xlsx)", type=["xlsx"])
    if uploaded_file is not None:
        try:
            df = pd.read_excel(uploaded_file)
        except Exception as e:
            st.error(f"Error reading uploaded file: {e}")
elif upload_option == "Provide Online Excel Link":
    excel_link = st.text_input("üîó Paste your Microsoft Excel Online Link:")
    if excel_link:
        try:
            response = requests.get(excel_link, stream=True, timeout=10)
            response.raise_for_status()
            df = pd.read_excel(io.BytesIO(response.content))
        except Exception as e:
            st.error(f"Error fetching Excel from link: {e}. The SharePoint link may require authentication. Please upload the file directly or ensure the link is publicly accessible.")

if df is not None:
    st.success("Data loaded successfully!")
    st.dataframe(df)

    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BMI
    def calculate_bmi(row):
        try:
            weight = row['Weight_kg']
            height = row['Height_cm']
            if pd.isna(weight) or pd.isna(height) or height == 0:
                return None
            bmi = weight / ((height / 100) ** 2)
            return round(bmi, 2)
        except Exception as e:
            st.warning(f"Error calculating BMI for a row: {e}")
            return None

    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö BMI
    def assign_info_level(bmi):
        if bmi is None:
            return "Unknown", "BMI data is missing"
        elif bmi > 25:
            return "Low", "BMI exceeds 25"
        else:
            return "High", "BMI within normal range"

    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå
    def assign_exp_level(exp_years, description):
        try:
            exp_str = str(exp_years).strip()
            if exp_str == "‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 10‡∏õ‡∏µ":
                years = 10
            elif exp_str == "7-10 ‡∏õ‡∏µ":
                years = 7
            elif exp_str == "4-6 ‡∏õ‡∏µ":
                years = 4
            elif exp_str == "1-3 ‡∏õ‡∏µ":
                years = 1
            else:
                years = 0

            keywords_high = [
                "lead", "manager", "senior", "expert", "specialist", "consultant", "director", "chief", "head", "principal",
                "‡∏ú‡∏π‡πâ‡∏ô‡∏≥", "‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£", "‡∏≠‡∏≤‡∏ß‡∏∏‡πÇ‡∏™", "‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç", "‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤", "‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£", "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤", "‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£",
                "doctor", "physician", "surgeon", "anesthetist", "radiologist", "pediatrician", "neurosurgeon", "cardiologist",
                "‡πÅ‡∏û‡∏ó‡∏¢‡πå", "‡∏´‡∏°‡∏≠", "‡∏®‡∏±‡∏•‡∏¢‡πÅ‡∏û‡∏ó‡∏¢‡πå", "‡∏ß‡∏¥‡∏™‡∏±‡∏ç‡∏ç‡∏µ‡πÅ‡∏û‡∏ó‡∏¢‡πå", "‡∏£‡∏±‡∏á‡∏™‡∏µ‡πÅ‡∏û‡∏ó‡∏¢‡πå", "‡∏Å‡∏∏‡∏°‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå", "‡∏®‡∏±‡∏•‡∏¢‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏™‡∏°‡∏≠‡∏á", "‡∏≠‡∏≤‡∏¢‡∏∏‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå", "‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç",
                "nurse practitioner", "head nurse", "chief nurse",
                "‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û", "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•", "‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•"
            ]
            keywords_mid = [
                "assist", "support", "junior", "operator", "staff", "clerk", "coordinator", "trainee",
                "‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢", "‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô", "‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà", "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", "‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏á‡∏≤‡∏ô", "‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô", "‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£",
                "registered nurse", "practical nurse", "medical assistant", "pharmacy technician", "lab technician", "radiographer",
                "‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•", "‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•", "‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå", "‡πÄ‡∏†‡∏™‡∏±‡∏ä‡∏Å‡∏£", "‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏†‡∏™‡∏±‡∏ä", "‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏á‡∏™‡∏µ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ", "‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î", "‡∏ô‡∏±‡∏Å‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤"
            ]

            desc_lower = str(description).lower()

            if years >= 5:
                return "High", "Experience over 5 years"
            elif years >= 2:
                return "Mid", "Experience between 2 and 5 years"
            else:
                for word in keywords_high:
                    if word.lower() in desc_lower:
                        return "Mid", f"Keyword '{word}' found in description"
                for word in keywords_mid:
                    if word.lower() in desc_lower:
                        return "Low", f"Keyword '{word}' found in description"
                return "Low", "No significant keywords found, less than 2 years experience"
        except Exception as e:
            return "Unknown", f"Error processing experience: {e}"

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BMI ‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå
    df['BMI'] = df.apply(calculate_bmi, axis=1)
    df[['Info Level', 'Info Reason']] = df['BMI'].apply(lambda bmi: pd.Series(assign_info_level(bmi)))
    df[['Exp Level', 'Exp Reason']] = df.apply(
        lambda row: pd.Series(assign_exp_level(
            row.get('Experience_Years', 0),
            row.get('‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏•‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', '')
        )), axis=1
    )

    # ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    st.subheader("üîç Filter Applicants")
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        position_options = ['All'] + list(df['‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏ô‡πÉ‡∏à'].dropna().unique())
        selected_position = st.selectbox("Position", position_options)
    with col2:
        exp_options = ['All', '‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 10‡∏õ‡∏µ', '7-10 ‡∏õ‡∏µ', '4-6 ‡∏õ‡∏µ', '1-3 ‡∏õ‡∏µ']
        selected_exp = st.selectbox("Experience", exp_options)
    with col3:
        toeic_min = st.number_input("Minimum TOEIC Score", min_value=0, max_value=990, value=0)
    with col4:
        bmi_max = st.number_input("Maximum BMI", min_value=0.0, value=25.0)

    # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    filtered_df = df.copy()
    if selected_position != 'All':
        filtered_df = filtered_df[filtered_df['‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏ô‡πÉ‡∏à'] == selected_position]
    if selected_exp != 'All':
        filtered_df = filtered_df[filtered_df['Experience_Years'] == selected_exp]
    if toeic_min > 0:
        filtered_df = filtered_df[filtered_df['TOEIC Score (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)'].fillna(0) >= toeic_min]
    if bmi_max > 0:
        filtered_df = filtered_df[filtered_df['BMI'].fillna(100) <= bmi_max]

    st.write(f"Found {len(filtered_df)} applicants after filtering")
    st.dataframe(filtered_df)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
    st.subheader("üéØ Analyzed Applicants")
    for idx, row in filtered_df.iterrows():
        experience = row.get('‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏•‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', 'N/A')
        st.markdown(f"""
            <div class="card">
                <h4 style='color:#00d4ff;'>{row.get('‡∏ä‡∏∑‡πà‡∏≠ (Name)', 'Unknown')} {row.get('‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏Å‡∏∏‡∏• (Surname)', '')}</h4>
                <ul>
                    <li><b>BMI:</b> {row['BMI'] if pd.notna(row['BMI']) else 'N/A'}</li>
                    <li><b>Info Level:</b> {row['Info Level']} ‚Äî {row['Info Reason']}</li>
                    <li><b>Experience Level:</b> {row['Exp Level']} ‚Äî {row['Exp Reason']}</li>
                    <li><b>Position:</b> {row.get('‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏ô‡πÉ‡∏à', 'N/A')}</li>
                    <li><b>Department:</b> {row.get('‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏ô‡πÉ‡∏à', 'N/A')}</li>
                    <li><b>TOEIC Score:</b> {row.get('TOEIC Score (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)', 'N/A')}</li>
                    <li><b>Experience Details:</b> {experience}</li>
                </ul>
                <a href="mailto:?subject=‡πÅ‡∏à‡πâ‡∏á‡∏ô‡∏±‡∏î‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö BDMS&body=‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏∏‡∏ì {row.get('‡∏ä‡∏∑‡πà‡∏≠ (Name)', 'Unknown')} {row.get('‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏Å‡∏∏‡∏• (Surname)', '')}%0D%0A%0D%0A‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á {row.get('‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏ô‡πÉ‡∏à', 'N/A')} ‡∏Å‡∏±‡∏ö‡∏ó‡∏≤‡∏á BDMS%0D%0A‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡πÄ‡∏ä‡∏¥‡∏ç‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡∏á‡∏≤‡∏ô%0D%0A%0D%0A‡∏ß‡∏±‡∏ô/‡πÄ‡∏ß‡∏•‡∏≤: 20 ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° 2568, 10:00 ‡∏ô.%0D%0A‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà/‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå: Microsoft Teams%0D%0A‡∏ú‡∏π‡πâ‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå: HR Manager%0D%0A%0D%0A‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ%0D%0A‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ 123-456-7890%0D%0A%0D%0A‡∏Ç‡∏≠‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡∏∞‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏û‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå%0D%0A%0D%0A‡∏Ç‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏±‡∏ö‡∏ñ‡∏∑‡∏≠," target="_blank">
                    <button>üìß Send Interview Invite</button>
                </a>
                <a href="https://teams.microsoft.com/l/meeting/new" target="_blank">
                    <button style='background:#28a745; margin-left:10px;'>üìÖ Schedule Interview</button>
                </a>
            </div>
        """, unsafe_allow_html=True)

    # ‡∏Å‡∏£‡∏≤‡∏ü (‡πÉ‡∏ä‡πâ st.write ‡πÅ‡∏ó‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß)
    st.subheader("üìä Data Visualizations")
    st.write("### Number of Applicants by Position")
    position_counts = filtered_df['‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏ô‡πÉ‡∏à'].value_counts().reset_index()
    position_counts.columns = ['Position', 'Count']
    st.write(position_counts)

    st.write("### Experience Distribution")
    exp_counts = filtered_df['Experience_Years'].value_counts().reset_index()
    exp_counts.columns = ['Experience', 'Count']
    st.write(exp_counts)

    st.write("### BMI Level Distribution")
    bmi_counts = filtered_df['Info Level'].value_counts().reset_index()
    bmi_counts.columns = ['BMI Level', 'Count']
    st.write(bmi_counts)

else:
    st.info("Please upload a file or paste an Excel Online link to begin.")
